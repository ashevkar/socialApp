generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  username      String    @unique
  bio           String?
  profileImage  String?
  coverImage    String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tweets        Tweet[]
  likes         Like[]
  comments      Comment[]
  following     Follow[]  @relation("Following")
  followers     Follow[]  @relation("Followers")
}

model Tweet {
  id        String    @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String

  @@unique([userId, tweetId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String

  @@unique([followingId, followerId])
}

